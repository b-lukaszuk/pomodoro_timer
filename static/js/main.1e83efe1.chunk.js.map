{"version":3,"sources":["components/Button.tsx","utils/degreeToRadian.ts","components/canvas/draw/drawPieceOfPie.ts","components/canvas/draw/drawText.ts","utils/numToDeg.ts","utils/format.ts","components/canvas/draw/drawClock.ts","components/canvas/draw/drawArc.ts","utils/secsToHrsMinsSecs.ts","components/canvas/draw/drawTimer.ts","components/canvas/setCanvasDefaults.ts","components/canvas/Canvas.tsx","components/Checkbox.tsx","utils/getCurTime.ts","components/TextInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","displText","isDisplayed","onClickAction","onClick","degreeToRadian","degree","Math","PI","drawPieceOfPie","ctx","xMid","yMid","radius","startAngleDeg","endAngleDeg","color","correction","fillStyle","beginPath","moveTo","arc","closePath","fill","drawText","canv","text","displAtBottom","fontSize","parseInt","height","toFixed","font","textAlign","textBaseline","fillText","width","numToDeg","aNum","numAt12oClock","formatDigit","anInt","result","toString","length","formatTime","hrs","mins","secs","drawClock","minsFloat","hrsFloat","numsToDeg","drawSecs","drawMins","drawHrs","drawArc","lineWidth","strokeStyle","lineCap","stroke","secsToHrsMinsSecs","secsInt","floor","drawTimer","timerStartMs","timerEndMs","timerNowMs","displDigitsAtBottom","secsLeft","round","secsTotal","timeLeft","secsToHrMinsSecs","colorFont","colorMainPath","textToDisplay","timeLeftToTimeTotalInDeg","timeLeftSecsTo60InDeg","setCanvasDefaults","Canvas","canvasRef","useRef","displayClock","displayTimer","useEffect","canvas","current","getContext","clearRect","ref","className","Checkbox","name","displayedText","checked","type","onChange","htmlFor","getCurTime","curDate","Date","getHours","getMinutes","getSeconds","InputElt","nameIn","changeHandlerIn","changeHandler","labelIn","label","patternIn","pattern","placeholderIn","placeholder","valueIn","value","maxLength","size","App","useState","setHrs","setMins","setSecs","displClock","setDisplClock","setTimerStartMs","setTimerEndMs","setTimerNowMs","displTimer","setDisplTimer","timerInput","setTimerInput","isTimerOn","setIsTimerOn","alarmAtEnd","setAlarmAtEnd","timerId1","setInterval","time","getTime","updateTime","clearInterval","soundToPlay","Audio","play","timerId2","setTimeout","pause","clearTimeout","document","title","prevState","event","target","maxIncl","test","isInputCorrect","now","window","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kSAuBeA,EAbiB,SAACC,GAC7B,IAAMC,EAAoBD,EAAMC,UAC1BC,EAAuBF,EAAME,YAC7BC,EACFH,EAAMI,QAEV,OAAIF,EACO,wBAAQE,QAASD,EAAjB,SAAiCF,IAEjC,MCdAI,MALf,SAAwBC,GAEpB,OAAQA,EAAS,KAAQ,IAAMC,KAAKC,KCkBzBC,MAlBf,SAAwBC,EACpBC,EAAcC,EAAcC,EAC5BC,EAAuBC,EACvBC,GAGA,IAAMC,EAAqBZ,EAAe,IAE1CK,EAAIQ,UAAYF,EAChBN,EAAIS,YACJT,EAAIU,OAAOT,EAAMC,GACjBF,EAAIW,IAAIV,EAAMC,EAAMC,EAChBR,EAAeS,GAAiBG,EAChCZ,EAAeU,GAAeE,GAClCP,EAAIY,YACJZ,EAAIa,QCDOC,MAhBf,SAAkBC,EAAyBf,EACvCgB,EAAcV,GAA+C,IAAhCW,IAA+B,yDAExDC,EAAmBC,UAAUJ,EAAKK,OAAS,GAAGC,QAAQ,IAC1DrB,EAAIsB,KAAJ,UAAcJ,EAAd,YACAlB,EAAIuB,UAAY,SAChBvB,EAAIwB,aAAe,SACnBxB,EAAIQ,UAAYF,EAEZW,EACAjB,EAAIyB,SAAST,EAAMD,EAAKW,MAAQ,EAAGX,EAAKK,OAAoB,IAAXF,GAEjDlB,EAAIyB,SAAST,EAAMD,EAAKW,MAAQ,EAAGX,EAAKK,OAAS,ICR1CO,MAJf,SAAkBC,GAAmD,IAArCC,EAAoC,uDAAZ,GACpD,OAAQD,EAAOC,EAAiB,IAAMA,GCD1C,SAASC,EAAYC,GACjB,IAAIC,EAAkBD,EAAQ,EAAK,KAAOA,EAAME,WAChD,OAAyB,IAAlBD,EAAOE,OAAgB,IAAMF,EAAUA,EAGlD,SAASG,EAAWC,EAAaC,EAAcC,GAC3C,MAAM,GAAN,OAAUR,EAAYM,GAAtB,YAA8BN,EAAYO,GAA1C,YAAmDP,EAAYQ,ICkCpDC,MAdf,SAAmBxB,EAAyBf,EACxCoC,EAAaC,EAAcC,EAC3BrC,EAAcC,GAEd,IAAIsC,EAAoBH,EAAQC,EAAO,GACnCG,EAAmBL,EAAOI,EAAY,IAZ9C,SAAkBxC,EAA+BsC,EAC7CrC,EAAcC,GAEdH,EAAeC,EAAKC,EAAMC,EAAM,IAAK,EACjCwC,EAAUJ,EAAM,IAAK,wBAUzBK,CAAS3C,EAAKsC,EAAMrC,EAAMC,GArB9B,SAAkBF,EAA+BqC,EAC7CpC,EAAcC,GAEdH,EAAeC,EAAKC,EAAMC,EAAM,IAAK,EACjCwC,EAAUL,EAAM,IAAK,wBAkBzBO,CAAS5C,EAAKwC,EAAWvC,EAAMC,GA5BnC,SAAiBF,EAA+BoC,EAC5CnC,EAAcC,GACdH,EAAeC,EAAKC,EAAMC,EAAM,IAAK,EACjCwC,EAAUN,EAAK,IAAK,2BA0BxBS,CAAQ7C,EAAKyC,EAAUxC,EAAMC,GAC7BY,EAASC,EAAMf,EAAKmC,EAAWC,EAAKC,EAAMC,GAAO,SAAS,ICb/CQ,MArBf,SAAiB9C,EAA+BC,EAAcC,EAC1DC,EAAgBE,EAChB0C,EAAmBzC,GAGnB,IAAMC,EAAqBZ,EAAe,IAE1CK,EAAIgD,YAAc1C,EAClBN,EAAI+C,UAAYA,EAChB/C,EAAIiD,QAAU,QACdjD,EAAIS,YACgB,IAAhBJ,GAAqC,MAAhBA,EACrBL,EAAIW,IAAIV,EAAMC,EAAMC,EAAQ,EAAG,EAAIN,KAAKC,IAExCE,EAAIW,IAAIV,EAAMC,EAAMC,EAChBR,EAAe,GAAKY,EACpBZ,EAAeU,GAAeE,GAEtCP,EAAIkD,UCTOC,MATf,SAA2BC,GAEvB,IAAIhB,EAAcvC,KAAKwD,MAAMD,EAAU,MAIvC,MAAO,CAAEhB,IAAKA,EAAKC,KAHAxC,KAAKwD,OAAOD,EAAiB,KAANhB,GAAe,IAG1BE,KAFZzC,KAAKwD,MAAMD,EAAU,MCiD7BE,MA/Cf,SACIvC,EACAf,EACAuD,EACAC,EACAC,GAEK,IADLC,IACI,yDAEAC,EAAmB9D,KAAK+D,OAAOJ,EAAaC,GAAc,KAC1DI,EAAoBhE,KAAK+D,OAAOJ,EAAaD,GAAgB,KAC7DO,EAAkBC,EAAiBJ,GACnCK,EAAoBR,GAAcC,EAAa,MAAQ,UACvDQ,EAAwBT,GAAcC,EAAa,MAAQ,UAC3DS,EACAV,GAAcC,EACR,WACAtB,EAAW2B,EAAS1B,IAAK0B,EAASzB,KAAMyB,EAASxB,MACvD6B,EAAmC,IAAQ,IAAMR,EAAYE,EAC7DO,EAAgC1B,EAAU,GAAKiB,EAAU,IAE7Db,EAAQ9C,EAAKe,EAAKK,OAAS,EAAGL,EAAKW,MAAQ,EAAG,IAAK,IAAK,GAAIuC,GAC5DnB,EACI9C,EACAe,EAAKK,OAAS,EACdL,EAAKW,MAAQ,EACb,IACAyC,EACA,GACA,QAGCT,GAAuBF,GAAcC,GACtC1D,EACIC,EACAe,EAAKK,OAAS,EACdL,EAAKW,MAAQ,EACb,IACA,EACA0C,EACA,wBAIRtD,EAASC,EAAMf,EAAKkE,EAAeF,EAAWN,IC/CnCW,MALf,SAA2BtD,GACvBA,EAAKW,MAAQ,IACbX,EAAKK,OAAS,KC8EHkD,G,MA5DiB,SAAChF,GAE7B,IAAMiF,EACFC,iBAAiC,MAC/BhF,EAAuBF,EAAME,YAC7B4C,EAAc9C,EAAM8C,IACpBC,EAAe/C,EAAM+C,KACrBC,EAAehD,EAAMgD,KACrBmC,EAAwBnF,EAAMmF,aAC9BlB,EAAuBjE,EAAMiE,aAC7BC,EAAqBlE,EAAMkE,WAC3BC,EAAqBnE,EAAMmE,WAC3BiB,EAAwBpF,EAAMoF,aAqCpC,OAnCAC,qBAAU,WACN,IAAMC,EAAmCL,EAAUM,QACnD,GAAe,OAAXD,EAAJ,CAGAP,EAAkBO,GAClB,IAAM5E,EAAuC4E,EAAOE,WAAW,MACnD,OAAR9E,IAGJA,EAAI+E,UAAU,EAAG,EAAGH,EAAOlD,MAAOkD,EAAOxD,QACrCqD,GACAlC,EAAUqC,EAAQ5E,EAAKoC,EAAKC,EAAMC,EAAM,IAAK,KAE7CoC,GACApB,EACIsB,EACA5E,EACAuD,EACAC,EACAC,EACAgB,OAGT,CACCrC,EACAC,EACAC,EACAmC,EACAlB,EACAC,EACAC,EACAiB,IAGAlF,EAEI,8BACI,wBAAQkC,MAAM,MAAMN,OAAO,MAAM4D,IAAKT,EAAWU,UAAU,aAI5D,OC3CAC,G,MArBmB,SAAC5F,GAE/B,IAAM6F,EAAe7F,EAAM6F,KACrBC,EAAwB9F,EAAM8F,cAC9BC,EAAmB/F,EAAM+F,QACzB7F,EAAuBF,EAAME,YAC7BE,EAAoBJ,EAAMI,QAEhC,OAAIF,EAEI,sBAAKyF,UAAU,WAAf,UACI,uBAAOK,KAAK,WAAWH,KAAMA,EAAME,QAASA,EACxCE,SAAU,kBAAM7F,OACpB,uBAAO8F,QAASL,EAAhB,SAAwBC,OAIzB,OClBAK,EATI,WACf,IAAIC,EAAgB,IAAIC,KACxB,MAAO,CACHvD,IAAKsD,EAAQE,WACbvD,KAAMqD,EAAQG,aACdvD,KAAMoD,EAAQI,eC4CPC,G,MAjCmB,SAC9BzG,GAGA,IAAM0G,EAAiB1G,EAAM6F,KACvBc,EAA6B3G,EAAM4G,cACnC1G,EAAuBF,EAAME,YAC7B2G,EAAkB7G,EAAM8G,MACxBC,EAAoB/G,EAAMgH,QAAUhH,EAAMgH,QAAU,KACpDC,EAAwBjH,EAAMkH,YAAclH,EAAMkH,YAAc,GAChEC,EAAkBnH,EAAMoH,MAE9B,OAAIlH,EAEI,sBAAKyF,UAAU,YAAf,UACI,iCAAOkB,EAAP,YACA,uBACIhB,KAAMa,EACNV,KAAK,OACLgB,QAASD,EACTG,YAAaD,EACbG,MAAOD,EACPE,UAAW,EACXC,KAAM,EACNrB,SAAUU,OAKf,OCsGAY,G,MA1IO,WAGlB,IACA,EAA0CC,mBAASrB,IAAarD,KAAhE,mBAAOA,EAAP,KAAY2E,EAAZ,KACA,EAA4CD,mBAASrB,IAAapD,MAAlE,mBAAOA,EAAP,KAAa2E,EAAb,KACA,EAA4CF,mBAASrB,IAAanD,MAAlE,mBAAOA,EAAP,KAAa2E,EAAb,KACA,EAAyDH,oBAAS,GAAlE,mBAAOI,EAAP,KAAmBC,EAAnB,KAEA,EAA4DL,mBAAS,GAArE,mBAAOvD,EAAP,KAAqB6D,EAArB,KACA,EAAwDN,mBAAS,GAAjE,mBAAOtD,EAAP,KAAmB6D,EAAnB,KACA,EAAwDP,mBAAS,GAAjE,mBAAOrD,EAAP,KAAmB6D,EAAnB,KACA,EAAyDR,oBAAS,GAAlE,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAwDV,mBAAS,IAAjE,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAAuDZ,oBAAS,GAAhE,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAyDd,oBAAS,GAAlE,mBAAOe,EAAP,KAAmBC,EAAnB,KA0FA,OAzCAnD,qBAAU,WACN,IAaIoD,EAA2BC,aAAY,YAbxB,WACf,IAAIC,EAAcxC,IAClBsB,EAAOkB,EAAK7F,KACZ4E,EAAQiB,EAAK5F,MACb4E,EAAQgB,EAAK3F,MACTqF,GACAL,GAAc,IAAI3B,MAAOuC,WAEzBP,GAAanE,IAAc,IAAImC,MAAOuC,WACtCN,GAAa,GAKjBO,KA5EgB,KA8EpB,OAAO,WACHC,cAAcL,MAEnB,CAAC3F,EAAKC,EAAMC,EAAMqF,EAAWpE,EAAcC,IAE9CmB,qBAAU,WACN,IAAI0D,EAAgC,IAAIC,MACpC,+DACCX,GAAaE,GAA6B,IAAfrE,IAC5B6E,EAAYE,OACZnB,EAAgB,GAChBC,EAAc,GACdC,EAAc,IAElB,IAAMkB,EAA2BC,YAAW,WACxCJ,EAAYK,UACb,KACH,OAAO,kBAAMC,aAAaH,MAC3B,CAACX,EAAYF,EAAWnE,IAE3BmB,qBAAU,WACNiE,SAASC,MAAQ,mBAClB,IAGC,sBAAK5D,UAAU,MAAf,UACI,gDACA,cAAC,EAAD,CAAUE,KAAK,QAAQC,cAAe,aAClCC,QAAS6B,EAAY1H,aAAa,EAAME,QA5F3B,WACrByH,GAAc,SAAC2B,GAAD,OAAyBA,QA4FnC,cAAC,EAAD,CAAU3D,KAAK,QAAQC,cAAe,aAClCC,QAASkC,EAAY/H,aAAa,EAAME,QA1F3B,WACrB8H,GAAc,SAACsB,GAAD,OAAyBA,QA0FnC,cAAC,EAAD,CAAW3D,KAAM,aACb3F,YAAa+H,IAAeI,EAC5BvB,MAAO,mCACPE,QAAS,kBACTE,YAAY,KACZE,MAAOe,EACPvB,cA7Ee,SACvB6C,GAEArB,EAAcqB,EAAMC,OAAOtC,UA2EvB,cAAC,EAAD,CAAUvB,KAAK,aAAaC,cAAe,0BACvCC,QAASwC,EAAYrI,YAAa+H,IAAeI,EACjDjI,QAhGa,WAChBmI,GAAcR,EAAc,GACjCS,GAAc,SAACgB,GAAD,OAAyBA,QA+FnC,cAAC,EAAD,CAAQvJ,UAAW,cACfC,YAAa+H,IAAeI,EAAWjI,QA5EhC,WACf,GAbmB,SAACsB,GACpB,IANee,EACEkH,EAOjB,OAFsB,SACaC,KAAKlI,KAPzBe,EAQgBZ,SAASH,GAPvBiI,EAOiC,IAN1ClH,GAMuC,GANjBA,GAASkH,GAgBnCE,CAAe1B,GAAa,CAC5B,IAAI2B,GAAc,IAAIzD,MAAOuC,UAC7Bd,EAAgBgC,GAChB9B,EAAc8B,GACd/B,EAAc+B,EAA8B,GAAvBjI,SAASsG,GAAmB,KACjDG,GAAa,QAEbyB,OAAOC,MAAM,+CAqEb,cAAC,EAAD,CAAQ/J,UAAW,uBACfC,YAAa+H,GAAcI,EAAWjI,QAlExB,WACtB2H,EAAc,GACdO,GAAa,MAiET,cAAC,EAAD,CAAQpI,YAAa0H,GAAcK,EAC/BnF,IAAKA,EAAKC,KAAMA,EAAMC,KAAMA,EAAMmC,aAAcyC,EAChD3D,aAAcA,EAAcC,WAAYA,EACxCC,WAAYA,EACZiB,aAAc6C,KAChBL,IAAeK,GAAc,6DAC/B,8FACA,6DClIGgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,M","file":"static/js/main.1e83efe1.chunk.js","sourcesContent":["import { ReactElement } from \"react\";\n\nimport \"./Button.css\";\n\ninterface Props {\n    displText: string;\n    isDisplayed: boolean;\n    onClick: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst Button: React.FC<Props> = (props): ReactElement<HTMLElement> | null => {\n    const displText: string = props.displText;\n    const isDisplayed: boolean = props.isDisplayed;\n    const onClickAction: (e: React.MouseEvent<HTMLElement>) => void =\n        props.onClick;\n\n    if (isDisplayed) {\n        return <button onClick={onClickAction}>{displText}</button>;\n    } else {\n        return null;\n    }\n};\n\nexport default Button;\n","function degreeToRadian(degree: number): number {\n    // 1 rad = 180deg/pi = 57.296deg\n    return (degree % 360) / (180 / Math.PI);\n}\n\nexport default degreeToRadian;\n","import degreeToRadian from \"../../../utils/degreeToRadian\";\n\nfunction drawPieceOfPie(ctx: CanvasRenderingContext2D,\n    xMid: number, yMid: number, radius: number,\n    startAngleDeg: number, endAngleDeg: number,\n    color: string): void {\n\n    // in ctx.arc 0 is 3 o'clock, i want it to be 12 o'clock so:\n    const correction: number = degreeToRadian(90);\n\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(xMid, yMid);\n    ctx.arc(xMid, yMid, radius,\n        degreeToRadian(startAngleDeg) - correction,\n        degreeToRadian(endAngleDeg) - correction);\n    ctx.closePath();\n    ctx.fill()\n}\n\nexport default drawPieceOfPie;\n","function drawText(canv: HTMLCanvasElement, ctx: CanvasRenderingContext2D,\n    text: string, color: string, displAtBottom: boolean = true) {\n\n    let fontSize: number = parseInt((canv.height / 8).toFixed(0));\n    ctx.font = `${fontSize}px Arial`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = color;\n\n    if (displAtBottom) {\n        ctx.fillText(text, canv.width / 2, canv.height - fontSize * 1.2);\n    } else { // middle\n        ctx.fillText(text, canv.width / 2, canv.height / 2);\n    }\n}\n\nexport default drawText;\n","function numToDeg(aNum: number, numAt12oClock: number = 12): number {\n    return (aNum % numAt12oClock) * 360 / numAt12oClock;\n}\n\nexport default numToDeg;\n","function formatDigit(anInt: number) {\n    let result: string = (anInt < 0) ? \"00\" : anInt.toString();\n    return result.length === 1 ? (\"0\" + result) : result;\n}\n\nfunction formatTime(hrs: number, mins: number, secs: number): string {\n    return `${formatDigit(hrs)}:${formatDigit(mins)}:${formatDigit(secs)}`;\n}\n\nexport { formatDigit, formatTime };\n","import drawPieceOfPie from \"./drawPieceOfPie\";\nimport drawText from \"./drawText\";\nimport numsToDeg from \"../../../utils/numToDeg\";\nimport { formatTime } from \"../../../utils/format\";\n\n\nfunction drawHrs(ctx: CanvasRenderingContext2D, hrs: number,\n    xMid: number, yMid: number): void {\n    drawPieceOfPie(ctx, xMid, yMid, 100, 0,\n        numsToDeg(hrs, 12), \"rgba(212, 175, 55, 0.5)\");\n}\n\nfunction drawMins(ctx: CanvasRenderingContext2D, mins: number,\n    xMid: number, yMid: number): void {\n\n    drawPieceOfPie(ctx, xMid, yMid, 150, 0,\n        numsToDeg(mins, 60), \"rgba(0, 0, 255, 0.3)\");\n}\n\nfunction drawSecs(ctx: CanvasRenderingContext2D, secs: number,\n    xMid: number, yMid: number): void {\n\n    drawPieceOfPie(ctx, xMid, yMid, 200, 0,\n        numsToDeg(secs, 60), \"rgba(255, 0, 0, 0.2)\");\n}\n\nfunction drawClock(canv: HTMLCanvasElement, ctx: CanvasRenderingContext2D,\n    hrs: number, mins: number, secs: number,\n    xMid: number, yMid: number): void {\n\n    let minsFloat: number = mins + (secs / 60);\n    let hrsFloat: number = hrs + (minsFloat / 60);\n\n    drawSecs(ctx, secs, xMid, yMid);\n    drawMins(ctx, minsFloat, xMid, yMid);\n    drawHrs(ctx, hrsFloat, xMid, yMid);\n    drawText(canv, ctx, formatTime(hrs, mins, secs), \"black\", false);\n}\n\n\nexport default drawClock;\n","import degreeToRadian from \"../../../utils/degreeToRadian\";\n\nfunction drawArc(ctx: CanvasRenderingContext2D, xMid: number, yMid: number,\n    radius: number, endAngleDeg: number,\n    lineWidth: number, color: string): void {\n\n    // in ctx.arc 0 is 3 o'clock, i want it to be 12 o'clock so:\n    const correction: number = degreeToRadian(90);\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.lineCap = \"round\";\n    ctx.beginPath();\n    if (endAngleDeg === 0 || endAngleDeg === 360) {\n        ctx.arc(xMid, yMid, radius, 0, 2 * Math.PI);\n    } else {\n        ctx.arc(xMid, yMid, radius,\n            degreeToRadian(0) - correction,\n            degreeToRadian(endAngleDeg) - correction);\n    }\n    ctx.stroke();\n}\n\nexport default drawArc\n","import ITime from \"../interfaces/ITime\";\n\nfunction secsToHrsMinsSecs(secsInt: number): ITime {\n\n    let hrs: number = Math.floor(secsInt / 3600);\n    let mins: number = Math.floor((secsInt - (hrs * 3600)) / 60);\n    let secs: number = Math.floor(secsInt % 60);\n\n    return { hrs: hrs, mins: mins, secs: secs };\n}\n\nexport default secsToHrsMinsSecs;\n","import drawArc from \"./drawArc\";\nimport drawPieceOfPie from \"./drawPieceOfPie\";\nimport drawText from \"./drawText\";\nimport { formatTime } from \"../../../utils/format\";\nimport numsToDeg from \"../../../utils/numToDeg\";\nimport secsToHrMinsSecs from \"../../../utils/secsToHrsMinsSecs\";\nimport ITime from \"../../../interfaces/ITime\";\n\nfunction drawTimer(\n    canv: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D,\n    timerStartMs: number,\n    timerEndMs: number,\n    timerNowMs: number,\n    displDigitsAtBottom: boolean = true\n): void {\n\n    let secsLeft: number = Math.round((timerEndMs - timerNowMs) / 1000);\n    let secsTotal: number = Math.round((timerEndMs - timerStartMs) / 1000);\n    let timeLeft: ITime = secsToHrMinsSecs(secsLeft);\n    let colorFont: string = timerEndMs <= timerNowMs ? \"red\" : \"dimgray\";\n    let colorMainPath: string = timerEndMs <= timerNowMs ? \"red\" : \"dimgray\";\n    let textToDisplay: string =\n        timerEndMs <= timerNowMs\n            ? \"00:00:00\"\n            : formatTime(timeLeft.hrs, timeLeft.mins, timeLeft.secs);\n    let timeLeftToTimeTotalInDeg: number = 360 - ((360 * secsLeft) / secsTotal);\n    let timeLeftSecsTo60InDeg: number = numsToDeg(60 - secsLeft, 60);\n\n    drawArc(ctx, canv.height / 2, canv.width / 2, 240, 360, 10, colorMainPath);\n    drawArc(\n        ctx,\n        canv.height / 2,\n        canv.width / 2,\n        240,\n        timeLeftToTimeTotalInDeg,\n        10,\n        \"red\"\n    );\n\n    if (!displDigitsAtBottom && timerEndMs >= timerNowMs) {\n        drawPieceOfPie(\n            ctx,\n            canv.height / 2,\n            canv.width / 2,\n            200,\n            0,\n            timeLeftSecsTo60InDeg,\n            \"rgba(255, 0, 0, 0.3)\"\n        );\n    }\n\n    drawText(canv, ctx, textToDisplay, colorFont, displDigitsAtBottom);\n}\n\nexport default drawTimer;\n","function setCanvasDefaults(canv: HTMLCanvasElement): void {\n    canv.width = 500;\n    canv.height = 500;\n}\n\nexport default setCanvasDefaults;\n","import React, { ReactElement, useEffect, useRef } from \"react\";\n\nimport drawClock from \"./draw/drawClock\";\nimport drawTimer from \"./draw/drawTimer\";\nimport setCanvasDefaults from \"./setCanvasDefaults\";\n\nimport \"./Canvas.css\";\n\ninterface Props {\n    isDisplayed: boolean;\n    hrs: number;\n    mins: number;\n    secs: number;\n    displayClock: boolean;\n    timerStartMs: number;\n    timerEndMs: number;\n    timerNowMs: number;\n    displayTimer: boolean;\n}\n\nconst Canvas: React.FC<Props> = (props): ReactElement<HTMLElement> | null => {\n\n    const canvasRef: React.MutableRefObject<HTMLCanvasElement | null> =\n        useRef<HTMLCanvasElement | null>(null);\n    const isDisplayed: boolean = props.isDisplayed;\n    const hrs: number = props.hrs;\n    const mins: number = props.mins;\n    const secs: number = props.secs;\n    const displayClock: boolean = props.displayClock;\n    const timerStartMs: number = props.timerStartMs;\n    const timerEndMs: number = props.timerEndMs;\n    const timerNowMs: number = props.timerNowMs;\n    const displayTimer: boolean = props.displayTimer;\n\n    useEffect(() => {\n        const canvas: HTMLCanvasElement | null = canvasRef.current;\n        if (canvas === null) {\n            return undefined;\n        }\n        setCanvasDefaults(canvas);\n        const ctx: CanvasRenderingContext2D | null = canvas.getContext(\"2d\");\n        if (ctx === null) {\n            return undefined;\n        }\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        if (displayClock) {\n            drawClock(canvas, ctx, hrs, mins, secs, 250, 250);\n        }\n        if (displayTimer) {\n            drawTimer(\n                canvas,\n                ctx,\n                timerStartMs,\n                timerEndMs,\n                timerNowMs,\n                displayClock\n            );\n        }\n    }, [\n        hrs,\n        mins,\n        secs,\n        displayClock,\n        timerStartMs,\n        timerEndMs,\n        timerNowMs,\n        displayTimer,\n    ]);\n\n    if (isDisplayed) {\n        return (\n            <div>\n                <canvas width=\"500\" height=\"500\" ref={canvasRef} className=\"canvas\" />\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nexport default Canvas;\n","import React, { ReactElement } from \"react\";\n\nimport \"./Checkbox.css\";\n\ninterface Props {\n    name: string;\n    displayedText: string;\n    checked: boolean;\n    isDisplayed: boolean;\n    onClick: Function;\n}\n\nconst Checkbox: React.FC<Props> = (props): ReactElement<HTMLElement> | null => {\n\n    const name: string = props.name;\n    const displayedText: string = props.displayedText;\n    const checked: boolean = props.checked;\n    const isDisplayed: boolean = props.isDisplayed;\n    const onClick: Function = props.onClick;\n\n    if (isDisplayed) {\n        return (\n            <div className=\"checkbox\">\n                <input type=\"checkbox\" name={name} checked={checked}\n                    onChange={() => onClick()} />\n                <label htmlFor={name} >{displayedText}</label>\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\n\nexport default Checkbox;\n","import ITime from \"../interfaces/ITime\";\n\nconst getCurTime = (): ITime => {\n    let curDate: Date = new Date();\n    return {\n        hrs: curDate.getHours(),\n        mins: curDate.getMinutes(),\n        secs: curDate.getSeconds(),\n    }\n}\n\nexport default getCurTime;\n","import React, { ChangeEvent, ReactElement } from \"react\";\n\nimport \"./TextInput.css\";\n\ninterface handlerFn {\n    (event: ChangeEvent<HTMLInputElement>): void;\n}\n\ninterface Props {\n    name: string;\n    changeHandler: handlerFn;\n    isDisplayed: boolean;\n    label: string;\n    pattern?: string;\n    placeholder?: string;\n    value: string;\n}\n\nconst InputElt: React.FC<Props> = (\n    props\n): ReactElement<HTMLInputElement> | null => {\n\n    const nameIn: string = props.name;\n    const changeHandlerIn: handlerFn = props.changeHandler;\n    const isDisplayed: boolean = props.isDisplayed;\n    const labelIn: string = props.label;\n    const patternIn: string = props.pattern ? props.pattern : \".*\";\n    const placeholderIn: string = props.placeholder ? props.placeholder : \"\";\n    const valueIn: string = props.value;\n\n    if (isDisplayed) {\n        return (\n            <div className=\"textInput\">\n                <span>{labelIn}: &nbsp;</span>\n                <input\n                    name={nameIn}\n                    type=\"text\"\n                    pattern={patternIn}\n                    placeholder={placeholderIn}\n                    value={valueIn}\n                    maxLength={4}\n                    size={4}\n                    onChange={changeHandlerIn}\n                />\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nexport default InputElt;\n","import React, { ReactElement, useEffect, useState } from 'react';\n\nimport Button from \"./components/Button\";\nimport Canvas from \"./components/canvas/Canvas\";\nimport Checkbox from \"./components/Checkbox\";\nimport getCurTime from \"./utils/getCurTime\";\nimport ITime from \"./interfaces/ITime\";\nimport TextInput from \"./components/TextInput\";\n\nimport './App.css';\n\nconst App: React.FC = (): ReactElement<HTMLElement> => {\n\n    // clock\n    const delayMs: number = 1000;\n    const [hrs, setHrs]: [number, Function] = useState(getCurTime().hrs);\n    const [mins, setMins]: [number, Function] = useState(getCurTime().mins);\n    const [secs, setSecs]: [number, Function] = useState(getCurTime().secs);\n    const [displClock, setDisplClock]: [boolean, Function] = useState(true);\n    // timer\n    const [timerStartMs, setTimerStartMs]: [number, Function] = useState(0);\n    const [timerEndMs, setTimerEndMs]: [number, Function] = useState(0);\n    const [timerNowMs, setTimerNowMs]: [number, Function] = useState(0);\n    const [displTimer, setDisplTimer]: [boolean, Function] = useState(false);\n    const [timerInput, setTimerInput]: [string, Function] = useState(\"\");\n    const [isTimerOn, setIsTimerOn]: [boolean, Function] = useState(false);\n    const [alarmAtEnd, setAlarmAtEnd]: [boolean, Function] = useState(true);\n\n    const toggleDisplClock = (): void => {\n        setDisplClock((prevState: boolean) => !prevState);\n    };\n\n    const toggleDisplTimer = (): void => {\n        setDisplTimer((prevState: boolean) => !prevState);\n    };\n\n    const toggleAlarmAtEnd = (): void => {\n        if (!alarmAtEnd) { setTimerEndMs(0) };\n        setAlarmAtEnd((prevState: boolean) => !prevState);\n    }\n\n    const isBetween = (anInt: number,\n        minIncl: number, maxIncl: number): boolean => {\n        return (anInt >= minIncl) && (anInt <= maxIncl);\n    }\n\n    const isInputCorrect = (text: string): boolean => {\n        let pattern: RegExp = /[^0-9]/;\n        let onlyDigits: boolean = !pattern.test(text)\n        return onlyDigits && isBetween(parseInt(text), 1, 300);\n    }\n\n    const handleTypingDigits = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setTimerInput(event.target.value);\n    };\n\n    const startTimer = (): void => {\n        if (isInputCorrect(timerInput)) {\n            let now: number = new Date().getTime();\n            setTimerStartMs(now);\n            setTimerNowMs(now);\n            setTimerEndMs(now + (parseInt(timerInput) * 60 * 1000));\n            setIsTimerOn(true);\n        } else {\n            window.alert(\"Incorrect input. Change it and try again\");\n        }\n    }\n\n    const stopAndResetTimer = (): void => {\n        setTimerEndMs(0);\n        setIsTimerOn(false);\n    }\n\n    useEffect(() => {\n        const updateTime = (): void => {\n            let time: ITime = getCurTime();\n            setHrs(time.hrs);\n            setMins(time.mins);\n            setSecs(time.secs);\n            if (isTimerOn) {\n                setTimerNowMs(new Date().getTime());\n            }\n            if (isTimerOn && timerEndMs <= new Date().getTime()) {\n                setIsTimerOn(false);\n            }\n        }\n\n        let timerId1: NodeJS.Timeout = setInterval(() => {\n            updateTime();\n        }, delayMs);\n        return () => {\n            clearInterval(timerId1);\n        }\n    }, [hrs, mins, secs, isTimerOn, timerStartMs, timerEndMs]);\n\n    useEffect(() => {\n        let soundToPlay: HTMLAudioElement = new Audio(\n            \"https://actions.google.com/sounds/v1/alarms/bugle_tune.ogg\");\n        if (!isTimerOn && alarmAtEnd && timerEndMs !== 0) {\n            soundToPlay.play();\n            setTimerStartMs(0);\n            setTimerEndMs(0);\n            setTimerNowMs(0);\n        }\n        const timerId2: NodeJS.Timeout = setTimeout(() => {\n            soundToPlay.pause();\n        }, 3000);\n        return () => clearTimeout(timerId2);\n    }, [alarmAtEnd, isTimerOn, timerEndMs]);\n\n    useEffect(() => {\n        document.title = \"Pomodoro Timer\";\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <h1>Pomodoro Timer</h1>\n            <Checkbox name=\"clock\" displayedText={\"show clock\"}\n                checked={displClock} isDisplayed={true} onClick={toggleDisplClock} />\n            <Checkbox name=\"timer\" displayedText={\"show timer\"}\n                checked={displTimer} isDisplayed={true} onClick={toggleDisplTimer} />\n            <TextInput name={\"timerInput\"}\n                isDisplayed={displTimer && !isTimerOn}\n                label={\"Time in minutes (integer, 1-300)\"}\n                pattern={\"[1-9][0-9]{0,3}\"}\n                placeholder=\"20\"\n                value={timerInput}\n                changeHandler={handleTypingDigits} />\n            <Checkbox name=\"alarmSound\" displayedText={\"play alarm sound at end\"}\n                checked={alarmAtEnd} isDisplayed={displTimer && !isTimerOn}\n                onClick={toggleAlarmAtEnd} />\n            <Button displText={\"start timer\"}\n                isDisplayed={displTimer && !isTimerOn} onClick={startTimer} />\n            <Button displText={\"stop and reset timer\"}\n                isDisplayed={displTimer && isTimerOn} onClick={stopAndResetTimer} />\n            <Canvas isDisplayed={displClock || displTimer}\n                hrs={hrs} mins={mins} secs={secs} displayClock={displClock}\n                timerStartMs={timerStartMs} timerEndMs={timerEndMs}\n                timerNowMs={timerNowMs}\n                displayTimer={displTimer} />\n            {!displClock && !displTimer && <h2>Nothing to display. Really?</h2>}\n            <p>This App is not meant for precise time (interval) measurement</p>\n            <p>Use it at Your own risk</p>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}