{"version":3,"sources":["components/Button.tsx","utils/degreeToRadian.ts","components/canvas/draw/drawPieceOfPie.ts","components/canvas/draw/drawText.ts","utils/numToDeg.ts","utils/format.ts","components/canvas/draw/drawClock.ts","components/canvas/draw/drawArc.ts","utils/secsToHrsMinsSecs.ts","components/canvas/draw/drawTimer.ts","components/canvas/setCanvasDefaults.ts","components/canvas/Canvas.tsx","components/Checkbox.tsx","utils/getCurTime.ts","components/TextInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","displText","onClickAction","onClick","degreeToRadian","degree","Math","PI","drawPieceOfPie","ctx","xMid","yMid","radius","startAngleDeg","endAngleDeg","color","correction","fillStyle","beginPath","moveTo","arc","closePath","fill","drawText","canv","text","displAtBottom","fontSize","parseInt","height","toFixed","font","textAlign","textBaseline","fillText","width","numToDeg","aNum","numAt12oClock","formatDigit","anInt","result","toString","length","formatTime","hrs","mins","secs","drawClock","minsFloat","hrsFloat","numsToDeg","drawSecs","drawMins","drawHrs","drawArc","lineWidth","strokeStyle","lineCap","stroke","secsToHrsMinsSecs","secsInt","floor","drawTimer","secsStart","secsLeft","displDigitsAtBottom","time","secsToHrMinsSecs","setCanvasDefaults","Canvas","canvasRef","useRef","displayClock","timerStartSecs","timerLeftSecs","displayTimer","useEffect","canvas","current","getContext","clearRect","ref","className","Checkbox","name","displayedText","checked","type","onChange","htmlFor","getCurTime","curDate","Date","getHours","getMinutes","getSeconds","InputElt","nameIn","changeHandlerIn","changeHandler","labelIn","label","patternIn","pattern","placeholderIn","placeholder","valueIn","value","maxLength","size","App","useState","setHrs","setMins","setSecs","displClock","setDisplClock","timerSecsStart","setTimerSecsStart","setSecsLeft","displTimer","setDisplTimer","timerInput","setTimerInput","isTimerOn","setIsTimerOn","timerId1","setInterval","prevSecsLeft","updateTime","clearInterval","document","title","prevState","event","target","maxIncl","test","isInputCorrect","window","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3b7c0b34.chunk.js","sourcesContent":["import { ReactElement } from \"react\";\n\nimport \"./Button.css\";\n\ninterface Props {\n    displText: string;\n    onClick: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst Button: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n    const displText: string = props.displText;\n    const onClickAction: (e: React.MouseEvent<HTMLElement>) => void = props.onClick;\n\n    return (\n        <button onClick={onClickAction}>\n            {displText}\n        </button>\n    )\n}\n\nexport default Button;\n","function degreeToRadian(degree: number): number {\n    // 1 rad = 180deg/pi = 57.296deg\n    return (degree % 360) / (180 / Math.PI);\n}\n\nexport default degreeToRadian;\n","import degreeToRadian from \"../../../utils/degreeToRadian\";\n\nfunction drawPieceOfPie(ctx: CanvasRenderingContext2D,\n    xMid: number, yMid: number, radius: number,\n    startAngleDeg: number, endAngleDeg: number,\n    color: string): void {\n\n    // in ctx.arc 0 is 3 o'clock, i want it to be 12 o'clock so:\n    const correction: number = degreeToRadian(90);\n\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.moveTo(xMid, yMid);\n    ctx.arc(xMid, yMid, radius,\n        degreeToRadian(startAngleDeg) - correction,\n        degreeToRadian(endAngleDeg) - correction);\n    ctx.closePath();\n    ctx.fill()\n}\n\nexport default drawPieceOfPie;\n","function drawText(canv: HTMLCanvasElement, ctx: CanvasRenderingContext2D,\n    text: string, color: string, displAtBottom: boolean = true) {\n\n    let fontSize: number = parseInt((canv.height / 8).toFixed(0));\n    ctx.font = `${fontSize}px Arial`;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = color;\n\n    if (displAtBottom) {\n        ctx.fillText(text, canv.width / 2, canv.height - fontSize * 1.2);\n    } else { // middle\n        ctx.fillText(text, canv.width / 2, canv.height / 2);\n    }\n}\n\nexport default drawText;\n","function numToDeg(aNum: number, numAt12oClock: number = 12): number {\n    return (aNum % numAt12oClock) * 360 / numAt12oClock;\n}\n\nexport default numToDeg;\n","function formatDigit(anInt: number) {\n    let result: string = (anInt < 0) ? \"00\" : anInt.toString();\n    return result.length === 1 ? (\"0\" + result) : result;\n}\n\nfunction formatTime(hrs: number, mins: number, secs: number): string {\n    return `${formatDigit(hrs)}:${formatDigit(mins)}:${formatDigit(secs)}`;\n}\n\nexport { formatDigit, formatTime };\n","import drawPieceOfPie from \"./drawPieceOfPie\";\nimport drawText from \"./drawText\";\nimport numsToDeg from \"../../../utils/numToDeg\";\nimport { formatTime } from \"../../../utils/format\";\n\n\nfunction drawHrs(ctx: CanvasRenderingContext2D, hrs: number,\n    xMid: number, yMid: number): void {\n    drawPieceOfPie(ctx, xMid, yMid, 100, 0,\n        numsToDeg(hrs, 12), \"rgba(212, 175, 55, 0.4)\");\n}\n\nfunction drawMins(ctx: CanvasRenderingContext2D, mins: number,\n    xMid: number, yMid: number): void {\n\n    drawPieceOfPie(ctx, xMid, yMid, 150, 0,\n        numsToDeg(mins, 60), \"rgba(0, 0, 255, 0.25)\");\n}\n\nfunction drawSecs(ctx: CanvasRenderingContext2D, secs: number,\n    xMid: number, yMid: number): void {\n\n    drawPieceOfPie(ctx, xMid, yMid, 200, 0,\n        numsToDeg(secs, 60), \"rgba(255, 0, 0, 0.1)\");\n}\n\nfunction drawClock(canv: HTMLCanvasElement, ctx: CanvasRenderingContext2D,\n    hrs: number, mins: number, secs: number,\n    xMid: number, yMid: number): void {\n\n    let minsFloat: number = mins + (secs / 60);\n    let hrsFloat: number = hrs + (minsFloat / 60);\n\n    drawSecs(ctx, secs, xMid, yMid);\n    drawMins(ctx, minsFloat, xMid, yMid);\n    drawHrs(ctx, hrsFloat, xMid, yMid);\n    drawText(canv, ctx, formatTime(hrs, mins, secs), \"black\", false);\n}\n\n\nexport default drawClock;\n","import degreeToRadian from \"../../../utils/degreeToRadian\";\n\nfunction drawArc(ctx: CanvasRenderingContext2D, xMid: number, yMid: number,\n    radius: number, endAngleDeg: number,\n    lineWidth: number, color: string): void {\n\n    // in ctx.arc 0 is 3 o'clock, i want it to be 12 o'clock so:\n    const correction: number = degreeToRadian(90);\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.lineCap = \"round\";\n    ctx.beginPath();\n    if (endAngleDeg === 0 || endAngleDeg === 360) {\n        ctx.arc(xMid, yMid, radius, 0, 2 * Math.PI);\n    } else {\n        ctx.arc(xMid, yMid, radius,\n            degreeToRadian(0) - correction,\n            degreeToRadian(endAngleDeg) - correction);\n    }\n    ctx.stroke();\n}\n\nexport default drawArc\n","import ITime from \"../interfaces/ITime\";\n\nfunction secsToHrsMinsSecs(secsInt: number): ITime {\n\n    let hrs: number = Math.floor(secsInt / 3600);\n    let mins: number = Math.floor((secsInt - (hrs * 3600)) / 60);\n    let secs: number = Math.floor(secsInt % 60);\n\n    return { hrs: hrs, mins: mins, secs: secs };\n}\n\nexport default secsToHrsMinsSecs;\n","import drawArc from \"./drawArc\";\nimport drawPieceOfPie from \"./drawPieceOfPie\";\nimport drawText from \"./drawText\";\nimport { formatTime } from \"../../../utils/format\";\nimport numsToDeg from \"../../../utils/numToDeg\";\nimport secsToHrMinsSecs from \"../../../utils/secsToHrsMinsSecs\";\nimport ITime from \"../../../interfaces/ITime\";\n\nfunction drawTimer(canv: HTMLCanvasElement, ctx: CanvasRenderingContext2D,\n    secsStart: number, secsLeft: number,\n    displDigitsAtBottom: boolean = true): void {\n\n    let time: ITime = secsToHrMinsSecs(secsLeft);\n    let color: string = (secsLeft <= 0) ? \"red\" : \"dimgray\";\n\n    drawArc(ctx, canv.height / 2, canv.width / 2, 240, 360, 10, \"lightgray\");\n    drawArc(ctx, canv.height / 2, canv.width / 2, 240,\n        360 * (1 - secsLeft / secsStart), 10, \"red\");\n\n    if (!displDigitsAtBottom) {\n        drawPieceOfPie(ctx, canv.height / 2, canv.width / 2, 200, 0,\n            numsToDeg(secsStart - secsLeft, 60), \"rgba(255, 0, 0, 0.3)\");\n    }\n\n    drawText(canv, ctx, formatTime(time.hrs, time.mins, time.secs),\n        color, displDigitsAtBottom);\n\n}\n\nexport default drawTimer;\n","function setCanvasDefaults(canv: HTMLCanvasElement): void {\n    canv.width = 500;\n    canv.height = 500;\n}\n\nexport default setCanvasDefaults;\n","import React, { ReactElement, useEffect, useRef } from \"react\";\n\nimport drawClock from \"./draw/drawClock\";\nimport drawTimer from \"./draw/drawTimer\";\nimport setCanvasDefaults from \"./setCanvasDefaults\";\n\nimport \"./Canvas.css\"\n\ninterface Props {\n    hrs: number;\n    mins: number;\n    secs: number;\n    displayClock: boolean;\n    timerStartSecs: number;\n    timerLeftSecs: number;\n    displayTimer: boolean;\n}\n\nconst Canvas: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const hrs: number = props.hrs;\n    const mins: number = props.mins;\n    const secs: number = props.secs;\n    const displayClock: boolean = props.displayClock;\n    const timerStartSecs: number = props.timerStartSecs;\n    const timerLeftSecs: number = props.timerLeftSecs;\n    const displayTimer: boolean = props.displayTimer;\n\n    useEffect(() => {\n        const canvas: HTMLCanvasElement | null = canvasRef.current;\n        if (canvas === null) {\n            return undefined;\n        }\n        setCanvasDefaults(canvas);\n        const ctx: CanvasRenderingContext2D | null = canvas.getContext(\"2d\");\n        if (ctx === null) {\n            return undefined;\n        }\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        if (displayClock) {\n            drawClock(canvas, ctx, hrs, mins, secs, 250, 250);\n        }\n        if (displayTimer) {\n            drawTimer(canvas, ctx, timerStartSecs, timerLeftSecs, displayClock);\n        }\n    }, [hrs, mins, secs, displayClock, timerStartSecs, timerLeftSecs, displayTimer]);\n\n    return (\n        <div>\n            <canvas width=\"500\" height=\"500\" ref={canvasRef} className=\"canvas\" />\n        </div>\n    );\n};\n\nexport default Canvas;\n","import React, { ReactElement } from \"react\";\n\nimport \"./Checkbox.css\";\n\ninterface Props {\n    name: string;\n    displayedText: string;\n    checked: boolean;\n    onClick: Function;\n}\n\nconst Checkbox: React.FC<Props> = (props): ReactElement<HTMLElement> => {\n\n    const name: string = props.name;\n    const displayedText: string = props.displayedText;\n    const checked: boolean = props.checked;\n    const onClick: Function = props.onClick;\n\n    return (\n        <div className=\"checkbox\">\n            <input type=\"checkbox\" name={name} checked={checked}\n                onChange={() => onClick()} />\n            <label htmlFor={name} >{displayedText}</label>\n        </div>\n    )\n}\n\nexport default Checkbox;\n","import ITime from \"../interfaces/ITime\";\n\nconst getCurTime = (): ITime => {\n    let curDate: Date = new Date();\n    return {\n        hrs: curDate.getHours(),\n        mins: curDate.getMinutes(),\n        secs: curDate.getSeconds(),\n    }\n}\n\nexport default getCurTime;\n","import React, { ChangeEvent, ReactElement } from \"react\";\n\nimport \"./TextInput.css\";\n\ninterface handlerFn {\n    (event: ChangeEvent<HTMLInputElement>): void\n}\n\ninterface Props {\n    name: string;\n    changeHandler: handlerFn;\n    label: string;\n    pattern?: string;\n    placeholder?: string;\n    value: string;\n}\n\nconst InputElt: React.FC<Props> = (props): ReactElement<HTMLInputElement> => {\n    const nameIn: string = props.name;\n    const changeHandlerIn: handlerFn = props.changeHandler;\n    const labelIn: string = props.label;\n    const patternIn: string = props.pattern ? props.pattern : \".*\";\n    const placeholderIn: string = props.placeholder ? props.placeholder : \"\";\n    const valueIn: string = props.value;\n\n    return (\n        <div className=\"textInput\">\n            <span>{labelIn}: &nbsp;</span>\n            <input name={nameIn} type=\"text\"\n                pattern={patternIn} placeholder={placeholderIn}\n                value={valueIn} maxLength={4} size={4}\n                onChange={changeHandlerIn} />\n        </div>\n    )\n\n}\n\nexport default InputElt;\n","import React, { ReactElement, useEffect, useState } from 'react';\n\nimport Button from \"./components/Button\";\nimport Canvas from \"./components/canvas/Canvas\";\nimport Checkbox from \"./components/Checkbox\";\nimport getCurTime from \"./utils/getCurTime\";\nimport ITime from \"./interfaces/ITime\";\nimport TextInput from \"./components/TextInput\";\n\nimport './App.css';\n\nconst App: React.FC = (): ReactElement<HTMLElement> => {\n\n    // clock\n    const [hrs, setHrs]: [number, Function] = useState(getCurTime().hrs);\n    const [mins, setMins]: [number, Function] = useState(getCurTime().mins);\n    const [secs, setSecs]: [number, Function] = useState(getCurTime().secs);\n    const [displClock, setDisplClock]: [boolean, Function] = useState(true);\n    // timer\n    const [timerSecsStart, setTimerSecsStart]: [number, Function] = useState(0);\n    const [secsLeft, setSecsLeft]: [number, Function] = useState(0);\n    const [displTimer, setDisplTimer]: [boolean, Function] = useState(false);\n    const [timerInput, setTimerInput]: [string, Function] = useState(\"\");\n    const [isTimerOn, setIsTimerOn]: [boolean, Function] = useState(false);\n\n    const toggleDisplClock = (): void => {\n        setDisplClock((prevState: boolean) => !prevState);\n    };\n\n    const toggleDisplTimer = (): void => {\n        setDisplTimer((prevState: boolean) => !prevState);\n    };\n\n    const isBetween = (anInt: number,\n        minIncl: number, maxIncl: number): boolean => {\n        return (anInt >= minIncl) && (anInt <= maxIncl);\n    }\n\n    const isInputCorrect = (text: string): boolean => {\n        let pattern: RegExp = /[^0-9]/;\n        let onlyDigits: boolean = !pattern.test(text)\n        return onlyDigits && isBetween(parseInt(text), 1, 1440);\n    }\n\n    const handleTypingDigits = (\n        event: React.ChangeEvent<HTMLInputElement>\n    ): void => {\n        setTimerInput(event.target.value);\n    };\n\n    const startTimer = (): void => {\n        if (isInputCorrect(timerInput)) {\n            setTimerSecsStart(parseInt(timerInput) * 60);\n            setSecsLeft(parseInt(timerInput) * 60);\n            setIsTimerOn(true);\n        } else {\n            window.alert(\"Incorrect input. Change it and try again\");\n        }\n    }\n\n    const stopTimer = (): void => {\n        setIsTimerOn(false);\n    }\n\n    useEffect(() => {\n        const updateTime = (): void => {\n            let time: ITime = getCurTime();\n            setHrs(time.hrs);\n            setMins(time.mins);\n            setSecs(time.secs);\n            if (isTimerOn && secsLeft > 0) {\n                setSecsLeft((prevSecsLeft: number) => prevSecsLeft - 1);\n            } else {\n                setIsTimerOn(false);\n            }\n        }\n\n        let timerId1 = setInterval(() => {\n            updateTime();\n        }, 1000);\n        return () => {\n            clearInterval(timerId1);\n        }\n    }, [hrs, mins, secs, secsLeft, isTimerOn]);\n\n    useEffect(() => {\n        document.title = \"Pomodoro Timer\";\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <h1>Pomodoro Timer</h1>\n            <Checkbox name=\"clock\" displayedText={\"show clock\"}\n                checked={displClock} onClick={toggleDisplClock} />\n            <Checkbox name=\"timer\" displayedText={\"show timer\"}\n                checked={displTimer} onClick={toggleDisplTimer} />\n            {displTimer && !isTimerOn &&\n                <TextInput name={\"timerInput\"}\n                    label={\"Time in minutes (integer, 1-1440)\"}\n                    pattern={\"[1-9][0-9]{0,3}\"}\n                    placeholder=\"20\"\n                    value={timerInput}\n                    changeHandler={handleTypingDigits}\n                />}\n            {displTimer && !isTimerOn &&\n                <Button displText={\"start timer\"}\n                    onClick={startTimer} />}\n            {displTimer && isTimerOn &&\n                <Button displText={\"stop timer\"}\n                    onClick={stopTimer} />}\n            {\n                (displClock || displTimer) &&\n                <Canvas hrs={hrs} mins={mins} secs={secs} displayClock={displClock}\n                    timerStartSecs={timerSecsStart} timerLeftSecs={secsLeft}\n                    displayTimer={displTimer} />\n            }\n            {!displClock && !displTimer &&\n                <h2>Nothing to display. Really?</h2>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}